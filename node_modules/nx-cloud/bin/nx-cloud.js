#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const stripJsonComments = require("strip-json-comments");
const resolution_helpers_1 = require("../lib/light-client/resolution-helpers");
const command = process.argv[2];
const options = JSON.parse(stripJsonComments((0, fs_1.readFileSync)(`nx.json`).toString())).tasksRunnerOptions.default.options;
if (options.useLightClient) {
    Promise.resolve().then(() => __awaiter(void 0, void 0, void 0, function* () { return invokeCommandWithLightRunner(options); }));
}
else {
    invokeCommandFromBundledImplementation();
}
function invokeCommandWithLightRunner(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { debugLog } = require('../lib/light-client/debug-logger');
        debugLog('Verifying current cloud bundle');
        const { verifyOrUpdateCloudBundle, } = require('../lib/light-client/update-manager');
        const cloudBundleInstall = yield verifyOrUpdateCloudBundle(options);
        if (cloudBundleInstall === null) {
            console.log('[Nx Cloud] Error: Unable to retrieve Nx Cloud bundle. Cannot run commands from the `nx-cloud` package.');
            process.exit(1);
        }
        debugLog('Done: ', cloudBundleInstall.fullPath);
        const lightClient = require(cloudBundleInstall.fullPath);
        const paths = (0, resolution_helpers_1.findAncestorNodeModules)(__dirname, []);
        lightClient.configureLightClientRequire()(paths);
        if (command in lightClient.commands) {
            lightClient.commands[command]()
                .then(() => process.exit(0))
                .catch((e) => {
                console.error(e);
                process.exit(1);
            });
        }
        else {
            console.log(`[Nx Cloud] Error: Unknown Command "${command}"`);
            console.log('----------------------------------------------');
            console.log(`Available Commands:\n> ${Object.keys(lightClient.commands).join('\n> ')}`);
            console.log('----------------------------------------------');
            process.exit(1);
        }
    });
}
function invokeCommandFromBundledImplementation() {
    if (command === 'start-agent') {
        const { startAgent, } = require('../lib/core/runners/distributed-agent/distributed-agent.impl');
        startAgent()
            .then(() => {
            process.exit(0);
        })
            .catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'stop-all-agents') {
        const { stopAllAgents } = require('../lib/core/commands/stop-all-agents');
        stopAllAgents()
            .then(() => {
            process.exit(0);
        })
            .catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'start-ci-run') {
        const { startCiRun } = require('../lib/core/commands/start-ci-run');
        startCiRun()
            .then(() => {
            process.exit(0);
        })
            .catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'clean-up-agents') {
        const { cleanUpAgents } = require('../lib/core/commands/clean-up-agents');
        cleanUpAgents().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'record') {
        const { runCommandAndStoreInCloud, } = require('../lib/core/commands/record-output');
        runCommandAndStoreInCloud().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else if (command === 'upload-and-show-run-details') {
        const { uploadAndShowRunDetails, } = require('../lib/core/commands/upload-and-show-run-details');
        uploadAndShowRunDetails().catch((e) => {
            console.error(e);
            process.exit(1);
        });
    }
    else {
        console.log('Pass start-agent, stop-all-agents, or clean-up-agents');
    }
}
//# sourceMappingURL=nx-cloud.js.map