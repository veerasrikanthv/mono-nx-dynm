"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usesJestPresetAngular = exports.transformerIsFromJestPresetAngular = exports.getNewAstTransformers = exports.updateTransform = exports.updateASTTransformers = void 0;
const devkit_1 = require("@nx/devkit");
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
const path_1 = require("path");
const update_config_1 = require("../../utils/config/update-config");
function updateJestConfig(tree) {
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/jest:jest', (options, project) => {
        if (!options.jestConfig) {
            return;
        }
        const jestConfigPath = options.jestConfig;
        const jestConfig = require((0, path_1.join)(tree.root, jestConfigPath));
        if (!usesJestPresetAngular(jestConfig)) {
            return;
        }
        try {
            updateASTTransformers(tree, jestConfigPath, jestConfig);
            updateTransform(tree, jestConfigPath, jestConfig);
        }
        catch {
            devkit_1.logger.error((0, devkit_1.stripIndents) `Unable to update jest.config.js for project ${project}.`);
        }
    });
}
async function update(tree) {
    updateJestConfig(tree);
    await (0, devkit_1.formatFiles)(tree);
}
exports.default = update;
function updateASTTransformers(tree, jestConfigPath, jestConfig) {
    const newTransformers = getNewAstTransformers(jestConfig.globals?.['ts-jest']?.astTransformers);
    if (newTransformers === null) {
        (0, update_config_1.removePropertyFromJestConfig)(tree, jestConfigPath, 'globals.ts-jest.astTransformers');
    }
    else {
        (0, update_config_1.addPropertyToJestConfig)(tree, jestConfigPath, 'globals.ts-jest.astTransformers', newTransformers);
    }
}
exports.updateASTTransformers = updateASTTransformers;
function updateTransform(tree, jestConfigPath, jestConfig) {
    (0, update_config_1.removePropertyFromJestConfig)(tree, jestConfigPath, 'transform');
    (0, update_config_1.addPropertyToJestConfig)(tree, jestConfigPath, 'transform', {
        '^.+\\.(ts|js|html)$': 'jest-preset-angular',
    });
}
exports.updateTransform = updateTransform;
function getNewAstTransformers(astTransformers) {
    let result = {
        before: astTransformers?.before?.filter?.((x) => !transformerIsFromJestPresetAngular(x)),
        after: astTransformers?.after?.filter?.((x) => !transformerIsFromJestPresetAngular(x)),
        afterDeclarations: astTransformers?.afterDeclarations?.filter?.((x) => !transformerIsFromJestPresetAngular(x)),
    };
    result = {
        before: result.before?.length > 0 ? result.before : undefined,
        after: result.after?.length > 0 ? result.after : undefined,
        afterDeclarations: result.afterDeclarations?.length > 0
            ? result.afterDeclarations
            : undefined,
    };
    if (!result.before && !result.after && !result.afterDeclarations) {
        return null;
    }
    else {
        return result;
    }
}
exports.getNewAstTransformers = getNewAstTransformers;
function transformerIsFromJestPresetAngular(transformer) {
    return typeof transformer === 'string'
        ? transformer.includes('jest-preset-angular')
        : transformer.path.includes('jest-preset-angular');
}
exports.transformerIsFromJestPresetAngular = transformerIsFromJestPresetAngular;
function usesJestPresetAngular(jestConfig) {
    const transformers = Array.isArray(jestConfig.globals?.['ts-jest']?.astTransformers)
        ? jestConfig.globals?.['ts-jest']?.astTransformers || []
        : jestConfig.globals?.['ts-jest']?.astTransformers?.before || [];
    return transformers.some((x) => transformerIsFromJestPresetAngular(x));
}
exports.usesJestPresetAngular = usesJestPresetAngular;
