"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nx/devkit");
const child_process_1 = require("child_process");
const npm_run_path_1 = require("npm-run-path");
const log_tar_1 = require("./log-tar");
const chalk = require("chalk");
const LARGE_BUFFER = 1024 * 1000000;
function processEnv(color) {
    const env = {
        ...process.env,
        ...(0, npm_run_path_1.env)(),
    };
    if (color) {
        env.FORCE_COLOR = `${color}`;
    }
    return env;
}
async function runExecutor(options, context) {
    const projectConfig = context.projectsConfigurations.projects[context.projectName];
    const packageRoot = (0, devkit_1.joinPathFragments)(context.root, options.packageRoot ?? projectConfig.root);
    const packageJsonPath = (0, devkit_1.joinPathFragments)(packageRoot, 'package.json');
    const projectPackageJson = (0, devkit_1.readJsonFile)(packageJsonPath);
    const name = projectPackageJson.name;
    // If package and project name match, we can make log messages terser
    let packageTxt = name === context.projectName
        ? `package "${name}"`
        : `package "${name}" from project "${context.projectName}"`;
    if (projectPackageJson.private === true) {
        console.warn(`Skipping ${packageTxt}, because it has \`"private": true\` in ${packageJsonPath}`);
        return {
            success: true,
        };
    }
    const npmPublishCommandSegments = [`npm publish --json`];
    if (options.registry) {
        npmPublishCommandSegments.push(`--registry=${options.registry}`);
    }
    if (options.tag) {
        npmPublishCommandSegments.push(`--tag=${options.tag}`);
    }
    if (options.dryRun) {
        npmPublishCommandSegments.push(`--dry-run`);
    }
    // Resolve values using the `npm config` command so that things like environment variables and `publishConfig`s are accounted for
    const registry = options.registry ?? (0, child_process_1.execSync)(`npm config get registry`).toString().trim();
    const tag = options.tag ?? (0, child_process_1.execSync)(`npm config get tag`).toString().trim();
    try {
        const output = (0, child_process_1.execSync)(npmPublishCommandSegments.join(' '), {
            maxBuffer: LARGE_BUFFER,
            env: processEnv(true),
            cwd: packageRoot,
            stdio: ['ignore', 'pipe', 'pipe'],
        });
        const stdoutData = JSON.parse(output.toString());
        // If npm workspaces are in use, the publish output will nest the data under the package name, so we normalize it first
        const normalizedStdoutData = stdoutData[context.projectName] ?? stdoutData;
        (0, log_tar_1.logTar)(normalizedStdoutData);
        if (options.dryRun) {
            console.log(`Would publish to ${registry} with tag "${tag}", but ${chalk.keyword('orange')('[dry-run]')} was set`);
        }
        else {
            console.log(`Published to ${registry} with tag "${tag}"`);
        }
        return {
            success: true,
        };
    }
    catch (err) {
        try {
            const currentVersion = projectPackageJson.version;
            const stdoutData = JSON.parse(err.stdout?.toString() || '{}');
            if (stdoutData.error?.code === 'EPUBLISHCONFLICT' ||
                (stdoutData.error?.code === 'E403' &&
                    stdoutData.error?.body?.error?.includes('You cannot publish over the previously published versions'))) {
                console.warn(`Skipping ${packageTxt}, as v${currentVersion} has already been published to ${registry} with tag "${tag}"`);
                return {
                    success: true,
                };
            }
            console.error('npm publish error:');
            if (stdoutData.error.summary) {
                console.error(stdoutData.error.summary);
            }
            if (stdoutData.error.detail) {
                console.error(stdoutData.error.detail);
            }
            return {
                success: false,
            };
        }
        catch (err) {
            // npm v9 onwards seems to guarantee stdout will be well formed JSON when --json is used, so maybe we need to
            // specify that as minimum supported version? (comes with node 18 and 20 by default)
            console.error('Something unexpected went wrong when processing the npm publish output\n', err);
            return {
                success: false,
            };
        }
    }
}
exports.default = runExecutor;
