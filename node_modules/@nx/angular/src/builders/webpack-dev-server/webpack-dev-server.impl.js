"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeWebpackDevServerBuilder = void 0;
const devkit_1 = require("@nx/devkit");
const webpack_nx_build_coordination_plugin_1 = require("@nx/webpack/src/plugins/webpack-nx-build-coordination-plugin");
const project_graph_1 = require("nx/src/project-graph/project-graph");
const fs_1 = require("fs");
const operators_1 = require("nx/src/project-graph/operators");
const webpack_1 = require("../utilities/webpack");
const lib_1 = require("./lib");
const buildable_libs_1 = require("../utilities/buildable-libs");
const rxjs_1 = require("rxjs");
const operators_2 = require("rxjs/operators");
const js_1 = require("@nx/js");
function executeWebpackDevServerBuilder(rawOptions, context) {
    process.env.NX_TSCONFIG_PATH = (0, js_1.getRootTsConfigPath)();
    const options = (0, lib_1.normalizeOptions)(rawOptions);
    const parsedBrowserTarget = (0, devkit_1.parseTargetString)(options.browserTarget, {
        cwd: context.currentDirectory,
        projectGraph: (0, devkit_1.readCachedProjectGraph)(),
        projectName: context.target.project,
        root: context.workspaceRoot,
        isVerbose: false,
    });
    const browserTargetProjectConfiguration = (0, project_graph_1.readCachedProjectConfiguration)(parsedBrowserTarget.project);
    const buildTarget = browserTargetProjectConfiguration.targets[parsedBrowserTarget.target];
    const buildTargetOptions = {
        ...buildTarget.options,
        ...(parsedBrowserTarget.configuration
            ? buildTarget.configurations[parsedBrowserTarget.configuration]
            : buildTarget.defaultConfiguration
                ? buildTarget.configurations[buildTarget.defaultConfiguration]
                : {}),
    };
    const buildLibsFromSource = options.buildLibsFromSource ??
        buildTargetOptions.buildLibsFromSource ??
        true;
    let pathToWebpackConfig;
    if (buildTargetOptions.customWebpackConfig?.path) {
        pathToWebpackConfig = (0, devkit_1.joinPathFragments)(context.workspaceRoot, buildTargetOptions.customWebpackConfig.path);
        if (pathToWebpackConfig && !(0, fs_1.existsSync)(pathToWebpackConfig)) {
            throw new Error(`Custom Webpack Config File Not Found!\nTo use a custom webpack config, please ensure the path to the custom webpack file is correct: \n${pathToWebpackConfig}`);
        }
    }
    let pathToIndexFileTransformer;
    if (buildTargetOptions.indexFileTransformer) {
        pathToIndexFileTransformer = (0, devkit_1.joinPathFragments)(context.workspaceRoot, buildTargetOptions.indexFileTransformer);
        if (pathToIndexFileTransformer && !(0, fs_1.existsSync)(pathToIndexFileTransformer)) {
            throw new Error(`File containing Index File Transformer function Not Found!\n Please ensure the path to the file containing the function is correct: \n${pathToIndexFileTransformer}`);
        }
    }
    let dependencies;
    if (!buildLibsFromSource) {
        const { tsConfigPath, dependencies: foundDependencies } = (0, buildable_libs_1.createTmpTsConfigForBuildableLibs)(buildTargetOptions.tsConfig, context, {
            target: parsedBrowserTarget.target,
        });
        dependencies = foundDependencies;
        // We can't just pass the tsconfig path in memory to the angular builder
        // function because we can't pass the build target options to it, the build
        // targets options will be retrieved by the builder from the project
        // configuration. Therefore, we patch the method in the context to retrieve
        // the target options to overwrite the tsconfig path to use the generated
        // one with the updated path mappings.
        const originalGetTargetOptions = context.getTargetOptions;
        context.getTargetOptions = async (target) => {
            const options = await originalGetTargetOptions(target);
            options.tsConfig = tsConfigPath;
            return options;
        };
        // The buildTargetConfiguration also needs to use the generated tsconfig path
        // otherwise the build will fail if customWebpack function/file is referencing
        // local libs. This synchronize the behavior with webpack-browser and
        // webpack-server implementation.
        buildTargetOptions.tsConfig = tsConfigPath;
    }
    return (0, rxjs_1.from)(Promise.resolve().then(() => require('@angular-devkit/build-angular'))).pipe((0, operators_2.switchMap)(({ executeDevServerBuilder }) => executeDevServerBuilder(options, context, {
        webpackConfiguration: async (baseWebpackConfig) => {
            if (!buildLibsFromSource) {
                const workspaceDependencies = dependencies
                    .filter((dep) => !(0, operators_1.isNpmProject)(dep.node))
                    .map((dep) => dep.node.name);
                // default for `nx run-many` is --all projects
                // by passing an empty string for --projects, run-many will default to
                // run the target for all projects.
                // This will occur when workspaceDependencies = []
                if (workspaceDependencies.length > 0) {
                    baseWebpackConfig.plugins.push(
                    // @ts-expect-error - difference between angular and webpack plugin definitions bc of webpack versions
                    new webpack_nx_build_coordination_plugin_1.WebpackNxBuildCoordinationPlugin(`nx run-many --target=${parsedBrowserTarget.target} --projects=${workspaceDependencies.join(',')}`));
                }
            }
            if (!pathToWebpackConfig) {
                return baseWebpackConfig;
            }
            return (0, webpack_1.mergeCustomWebpackConfig)(baseWebpackConfig, pathToWebpackConfig, buildTargetOptions, context.target);
        },
        ...(pathToIndexFileTransformer
            ? {
                indexHtml: (0, webpack_1.resolveIndexHtmlTransformer)(pathToIndexFileTransformer, buildTargetOptions.tsConfig, context.target),
            }
            : {}),
    })));
}
exports.executeWebpackDevServerBuilder = executeWebpackDevServerBuilder;
exports.default = require('@angular-devkit/architect').createBuilder(executeWebpackDevServerBuilder);
