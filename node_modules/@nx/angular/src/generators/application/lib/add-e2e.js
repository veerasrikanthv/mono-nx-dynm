"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addE2e = void 0;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../../utils/versions");
const cypress_1 = require("@nx/cypress");
async function addE2e(tree, options) {
    if (options.e2eTestRunner === 'cypress') {
        // TODO: This can call `@nx/web:static-config` generator when ready
        addFileServerTarget(tree, options, 'serve-static');
        await (0, cypress_1.cypressProjectGenerator)(tree, {
            name: options.e2eProjectName,
            directory: options.e2eProjectRoot,
            // the name and root are already normalized, instruct the generator to use them as is
            projectNameAndRootFormat: 'as-provided',
            project: options.name,
            linter: options.linter,
            standaloneConfig: options.standaloneConfig,
            skipPackageJson: options.skipPackageJson,
            skipFormat: true,
        });
    }
    else if (options.e2eTestRunner === 'playwright') {
        const { configurationGenerator: playwrightConfigurationGenerator } = (0, devkit_1.ensurePackage)('@nx/playwright', versions_1.nxVersion);
        (0, devkit_1.addProjectConfiguration)(tree, options.e2eProjectName, {
            root: options.e2eProjectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
            targets: {},
            implicitDependencies: [options.name],
        });
        await playwrightConfigurationGenerator(tree, {
            project: options.e2eProjectName,
            skipFormat: true,
            skipPackageJson: options.skipPackageJson,
            directory: 'src',
            js: false,
            linter: options.linter,
            setParserOptionsProject: options.setParserOptionsProject,
            webServerCommand: `${(0, devkit_1.getPackageManagerCommand)().exec} nx serve ${options.name}`,
            webServerAddress: `http://localhost:${options.port ?? 4200}`,
        });
    }
}
exports.addE2e = addE2e;
function addFileServerTarget(tree, options, targetName) {
    (0, devkit_1.addDependenciesToPackageJson)(tree, {}, { '@nx/web': versions_1.nxVersion });
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.name);
    projectConfig.targets[targetName] = {
        executor: '@nx/web:file-server',
        options: {
            buildTarget: `${options.name}:build`,
            port: options.port,
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, options.name, projectConfig);
}
