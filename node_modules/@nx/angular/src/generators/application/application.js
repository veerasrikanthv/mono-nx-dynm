"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationGeneratorInternal = exports.applicationGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const init_1 = require("../init/init");
const setup_tailwind_1 = require("../setup-tailwind/setup-tailwind");
const version_utils_1 = require("../utils/version-utils");
const lib_1 = require("./lib");
const semver_1 = require("semver");
const enquirer_1 = require("enquirer");
async function applicationGenerator(tree, schema) {
    return await applicationGeneratorInternal(tree, {
        projectNameAndRootFormat: 'derived',
        ...schema,
    });
}
exports.applicationGenerator = applicationGenerator;
async function applicationGeneratorInternal(tree, schema) {
    const installedAngularVersionInfo = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    if ((0, semver_1.lt)(installedAngularVersionInfo.version, '14.1.0') && schema.standalone) {
        throw new Error((0, devkit_1.stripIndents) `The "standalone" option is only supported in Angular >= 14.1.0. You are currently using ${installedAngularVersionInfo.version}.
    You can resolve this error by removing the "standalone" option or by migrating to Angular 14.1.0.`);
    }
    if ((0, semver_1.gte)(installedAngularVersionInfo.version, '14.1.0') &&
        schema.standalone === undefined &&
        process.env.NX_INTERACTIVE === 'true') {
        schema.standalone = await (0, enquirer_1.prompt)({
            name: 'standalone-components',
            message: 'Would you like to use Standalone Components?',
            type: 'confirm',
        }).then((a) => a['standalone-components']);
    }
    const options = await (0, lib_1.normalizeOptions)(tree, schema);
    const rootOffset = (0, devkit_1.offsetFromRoot)(options.appProjectRoot);
    await (0, init_1.angularInitGenerator)(tree, {
        ...options,
        skipFormat: true,
    });
    (0, lib_1.createProject)(tree, options);
    await (0, lib_1.createFiles)(tree, options, rootOffset);
    if (options.addTailwind) {
        await (0, setup_tailwind_1.setupTailwindGenerator)(tree, {
            project: options.name,
            skipFormat: true,
            skipPackageJson: options.skipPackageJson,
        });
    }
    await (0, lib_1.addLinting)(tree, options);
    await (0, lib_1.addUnitTestRunner)(tree, options);
    await (0, lib_1.addE2e)(tree, options);
    (0, lib_1.updateEditorTsConfig)(tree, options);
    if (options.rootProject) {
        const nxJson = (0, devkit_1.readNxJson)(tree);
        nxJson.defaultProject = options.name;
        (0, devkit_1.updateNxJson)(tree, nxJson);
    }
    if (options.backendProject) {
        (0, lib_1.addProxyConfig)(tree, options);
    }
    if (options.strict) {
        (0, lib_1.enableStrictTypeChecking)(tree, options);
    }
    else {
        (0, lib_1.setApplicationStrictDefault)(tree, false);
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return () => {
        (0, devkit_1.installPackagesTask)(tree);
    };
}
exports.applicationGeneratorInternal = applicationGeneratorInternal;
exports.default = applicationGenerator;
