"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSsr = void 0;
const devkit_1 = require("@nx/devkit");
const setup_ssr_1 = require("../../setup-ssr/setup-ssr");
const versions_1 = require("../../../utils/versions");
async function addSsr(tree, { appName, port, standalone, }) {
    let project = (0, devkit_1.readProjectConfiguration)(tree, appName);
    await (0, setup_ssr_1.default)(tree, {
        project: appName,
        standalone,
    });
    tree.rename((0, devkit_1.joinPathFragments)(project.sourceRoot, 'main.server.ts'), (0, devkit_1.joinPathFragments)(project.sourceRoot, 'bootstrap.server.ts'));
    tree.write((0, devkit_1.joinPathFragments)(project.root, 'server.ts'), "import('./src/main.server');");
    const browserBundleOutput = (0, devkit_1.joinPathFragments)(project.targets.build.options.outputPath, 'browser');
    const serverBundleOutput = (0, devkit_1.joinPathFragments)(project.targets.build.options.outputPath, 'server');
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/base'), project.root, {
        appName,
        browserBundleOutput,
        serverBundleOutput,
        standalone,
        tmpl: '',
    });
    if (standalone) {
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '../files/standalone'), project.root, {
            appName,
            standalone,
            tmpl: '',
        });
    }
    // update project.json
    project = (0, devkit_1.readProjectConfiguration)(tree, appName);
    project.targets.server.executor = '@nx/angular:webpack-server';
    project.targets.server.options.customWebpackConfig = {
        path: (0, devkit_1.joinPathFragments)(project.root, 'webpack.server.config.js'),
    };
    project.targets['serve-ssr'].options = {
        ...(project.targets['serve-ssr'].options ?? {}),
        port,
    };
    project.targets['static-server'] = {
        dependsOn: ['build', 'server'],
        executor: 'nx:run-commands',
        options: {
            command: `PORT=${port} node ${(0, devkit_1.joinPathFragments)(project.targets.server.options.outputPath, 'main.js')}`,
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, appName, project);
    const installTask = (0, devkit_1.addDependenciesToPackageJson)(tree, {
        cors: versions_1.corsVersion,
        express: versions_1.expressVersion,
        '@module-federation/node': versions_1.moduleFederationNodeVersion,
    }, {
        '@types/cors': versions_1.typesCorsVersion,
        '@types/express': versions_1.typesExpressVersion,
    });
    return installTask;
}
exports.addSsr = addSsr;
