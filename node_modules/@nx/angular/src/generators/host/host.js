"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hostInternal = exports.host = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const semver_1 = require("semver");
const test_runners_1 = require("../../utils/test-runners");
const application_1 = require("../application/application");
const remote_1 = require("../remote/remote");
const setup_mf_1 = require("../setup-mf/setup-mf");
const version_utils_1 = require("../utils/version-utils");
const lib_1 = require("./lib");
async function host(tree, options) {
    return await hostInternal(tree, {
        projectNameAndRootFormat: 'derived',
        ...options,
    });
}
exports.host = host;
async function hostInternal(tree, options) {
    const installedAngularVersionInfo = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    if ((0, semver_1.lt)(installedAngularVersionInfo.version, '14.1.0') && options.standalone) {
        throw new Error((0, devkit_1.stripIndents) `The "standalone" option is only supported in Angular >= 14.1.0. You are currently using ${installedAngularVersionInfo.version}.
    You can resolve this error by removing the "standalone" option or by migrating to Angular 14.1.0.`);
    }
    const projects = (0, devkit_1.getProjects)(tree);
    const remotesToGenerate = [];
    const remotesToIntegrate = [];
    if (options.remotes && options.remotes.length > 0) {
        options.remotes.forEach((remote) => {
            if (!projects.has(remote)) {
                remotesToGenerate.push(remote);
            }
            else {
                remotesToIntegrate.push(remote);
            }
        });
    }
    const { projectName: hostProjectName, projectNameAndRootFormat } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(tree, {
        name: options.name,
        projectType: 'application',
        directory: options.directory,
        projectNameAndRootFormat: options.projectNameAndRootFormat,
        callingGenerator: '@nx/angular:host',
    });
    options.projectNameAndRootFormat = projectNameAndRootFormat;
    const appInstallTask = await (0, application_1.default)(tree, {
        ...options,
        standalone: options.standalone ?? false,
        routing: true,
        port: 4200,
        skipFormat: true,
    });
    const skipE2E = !options.e2eTestRunner || options.e2eTestRunner === test_runners_1.E2eTestRunner.None;
    await (0, setup_mf_1.setupMf)(tree, {
        appName: hostProjectName,
        mfType: 'host',
        routing: true,
        port: 4200,
        remotes: remotesToIntegrate ?? [],
        federationType: options.dynamic ? 'dynamic' : 'static',
        skipPackageJson: options.skipPackageJson,
        skipFormat: true,
        skipE2E,
        e2eProjectName: skipE2E ? undefined : `${hostProjectName}-e2e`,
        prefix: options.prefix,
    });
    let installTasks = [appInstallTask];
    if (options.ssr) {
        let ssrInstallTask = await (0, lib_1.addSsr)(tree, options, hostProjectName);
        installTasks.push(ssrInstallTask);
    }
    for (const remote of remotesToGenerate) {
        let remoteDirectory = options.directory;
        if (options.projectNameAndRootFormat === 'as-provided' &&
            options.directory) {
            /**
             * With the `as-provided` format, the provided directory would be the root
             * of the host application. Append the remote name to the host parent
             * directory to get the remote directory.
             */
            remoteDirectory = (0, devkit_1.joinPathFragments)(options.directory, '..', remote);
        }
        await (0, remote_1.default)(tree, {
            ...options,
            name: remote,
            directory: remoteDirectory,
            host: hostProjectName,
            skipFormat: true,
            standalone: options.standalone,
        });
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return (0, devkit_1.runTasksInSerial)(...installTasks);
}
exports.hostInternal = hostInternal;
exports.default = host;
