"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateProjectConfig = void 0;
const devkit_1 = require("@nx/devkit");
function updateProjectConfig(tree, schema) {
    let projectConfig = (0, devkit_1.readProjectConfiguration)(tree, schema.project);
    const buildTarget = projectConfig.targets.build;
    const baseOutputPath = buildTarget.options.outputPath;
    buildTarget.options.outputPath = (0, devkit_1.joinPathFragments)(baseOutputPath, 'browser');
    const buildConfigurations = projectConfig.targets.build.configurations;
    const configurations = {};
    if (buildConfigurations) {
        for (const [key, options] of Object.entries(buildConfigurations)) {
            configurations[key] = getServerOptions(options);
        }
    }
    projectConfig.targets.server = {
        dependsOn: ['build'],
        executor: '@angular-devkit/build-angular:server',
        options: {
            outputPath: (0, devkit_1.joinPathFragments)(baseOutputPath, 'server'),
            main: (0, devkit_1.joinPathFragments)(projectConfig.root, schema.serverFileName),
            tsConfig: (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.server.json'),
            ...(buildTarget.options ? getServerOptions(buildTarget.options) : {}),
        },
        configurations,
        defaultConfiguration: 'production',
    };
    projectConfig.targets['serve-ssr'] = {
        executor: '@nguniversal/builders:ssr-dev-server',
        configurations: {
            development: {
                browserTarget: `${schema.project}:build:development`,
                serverTarget: `${schema.project}:server:development`,
            },
            production: {
                browserTarget: `${schema.project}:build:production`,
                serverTarget: `${schema.project}:server:production`,
            },
        },
        defaultConfiguration: 'development',
    };
    projectConfig.targets.prerender = {
        executor: '@nguniversal/builders:prerender',
        options: {
            routes: ['/'],
        },
        configurations: {
            development: {
                browserTarget: `${schema.project}:build:development`,
                serverTarget: `${schema.project}:server:development`,
            },
            production: {
                browserTarget: `${schema.project}:build:production`,
                serverTarget: `${schema.project}:server:production`,
            },
        },
        defaultConfiguration: 'production',
    };
    (0, devkit_1.updateProjectConfiguration)(tree, schema.project, projectConfig);
    const nxJson = (0, devkit_1.readNxJson)(tree);
    if (nxJson.tasksRunnerOptions?.default &&
        !nxJson.tasksRunnerOptions.default.options.cacheableOperations.includes('server')) {
        nxJson.tasksRunnerOptions.default.options.cacheableOperations = [
            ...nxJson.tasksRunnerOptions.default.options.cacheableOperations,
            'server',
        ];
        (0, devkit_1.updateNxJson)(tree, nxJson);
    }
}
exports.updateProjectConfig = updateProjectConfig;
function getServerOptions(options = {}) {
    return {
        buildOptimizer: options?.buildOptimizer,
        outputHashing: options?.outputHashing === 'all'
            ? 'media'
            : options?.outputHashing,
        fileReplacements: options?.fileReplacements,
        optimization: options?.optimization === undefined ? undefined : !!options?.optimization,
        sourceMap: options?.sourceMap,
        stylePreprocessorOptions: options?.stylePreprocessorOptions,
        resourcesOutputPath: options?.resourcesOutputPath,
        deployUrl: options?.deployUrl,
        i18nMissingTranslation: options?.i18nMissingTranslation,
        preserveSymlinks: options?.preserveSymlinks,
        extractLicenses: options?.extractLicenses,
        inlineStyleLanguage: options?.inlineStyleLanguage,
        vendorChunk: options?.vendorChunk,
    };
}
