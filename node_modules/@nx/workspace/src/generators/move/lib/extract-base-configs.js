"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.maybeExtractEslintConfigIfRootProject = exports.maybeExtractJestConfigBase = exports.maybeExtractTsConfigBase = void 0;
const devkit_1 = require("@nx/devkit");
function maybeExtractTsConfigBase(tree) {
    let extractTsConfigBase;
    try {
        extractTsConfigBase = require('@nx/' + 'js').extractTsConfigBase;
    }
    catch {
        // Not installed, skip
        return;
    }
    extractTsConfigBase(tree);
}
exports.maybeExtractTsConfigBase = maybeExtractTsConfigBase;
async function maybeExtractJestConfigBase(tree) {
    let jestInitGenerator;
    try {
        jestInitGenerator = require('@nx/' + 'jest').jestInitGenerator;
    }
    catch {
        // Not installed, skip
        return;
    }
    await jestInitGenerator(tree, {});
}
exports.maybeExtractJestConfigBase = maybeExtractJestConfigBase;
function maybeExtractEslintConfigIfRootProject(tree, rootProject) {
    if (rootProject.root !== '.')
        return;
    if (tree.exists('.eslintrc.base.json'))
        return;
    let migrateConfigToMonorepoStyle;
    try {
        migrateConfigToMonorepoStyle = require('@nx/' +
            'linter/src/generators/init/init-migration').migrateConfigToMonorepoStyle;
    }
    catch {
        // linter not install
    }
    // Only need to handle migrating the root rootProject.
    // If other libs/apps exist, then this migration is already done by `@nx/linter:lint-rootProject` generator.
    migrateConfigToMonorepoStyle?.([rootProject.name], tree, tree.exists((0, devkit_1.joinPathFragments)(rootProject.root, 'jest.config.ts')) ||
        tree.exists((0, devkit_1.joinPathFragments)(rootProject.root, 'jest.config.js'))
        ? 'jest'
        : 'none');
}
exports.maybeExtractEslintConfigIfRootProject = maybeExtractEslintConfigIfRootProject;
