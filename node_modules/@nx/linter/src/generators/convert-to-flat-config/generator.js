"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToFlatConfigGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const eslint_file_1 = require("../utils/eslint-file");
const json_converter_1 = require("./converters/json-converter");
async function convertToFlatConfigGenerator(tree, options) {
    const eslintFile = (0, eslint_file_1.findEslintFile)(tree);
    if (!eslintFile) {
        throw new Error('Could not find root eslint file');
    }
    if (!eslintFile.endsWith('.json')) {
        throw new Error('Only json eslint config files are supported for conversion');
    }
    // rename root eslint config to eslint.config.js
    convertRootToFlatConfig(tree, eslintFile);
    // rename and map files
    const projects = (0, devkit_1.getProjects)(tree);
    for (const [project, projectConfig] of projects) {
        convertProjectToFlatConfig(tree, project, projectConfig, (0, devkit_1.readNxJson)(tree));
    }
    // replace references in nx.json
    updateNxJsonConfig(tree);
    // install missing packages
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
}
exports.convertToFlatConfigGenerator = convertToFlatConfigGenerator;
exports.default = convertToFlatConfigGenerator;
function convertRootToFlatConfig(tree, eslintFile) {
    if (eslintFile.endsWith('.base.json')) {
        convertConfigToFlatConfig(tree, '', '.eslintrc.base.json', 'eslint.base.config.js');
    }
    convertConfigToFlatConfig(tree, '', '.eslintrc.json', 'eslint.config.js');
}
function convertProjectToFlatConfig(tree, project, projectConfig, nxJson) {
    if (tree.exists(`${projectConfig.root}/.eslintrc.json`)) {
        if (projectConfig.targets) {
            const eslintTargets = Object.keys(projectConfig.targets || {}).filter((t) => projectConfig.targets[t].executor === '@nx/linter:eslint');
            for (const target of eslintTargets) {
                // remove any obsolete `eslintConfig` options pointing to the old config file
                if (projectConfig.targets[target].options?.eslintConfig) {
                    delete projectConfig.targets[target].options.eslintConfig;
                }
                (0, devkit_1.updateProjectConfiguration)(tree, project, projectConfig);
            }
            const nxHasLintTargets = Object.keys(nxJson.targetDefaults || {}).some((t) => (t === '@nx/linter:eslint' ||
                nxJson.targetDefaults[t].executor === '@nx/linter:eslint') &&
                projectConfig.targets?.[t]);
            if (nxHasLintTargets || eslintTargets.length > 0) {
                convertConfigToFlatConfig(tree, projectConfig.root, '.eslintrc.json', 'eslint.config.js');
            }
        }
    }
}
// update names of eslint files in nx.json
// and remove eslintignore
function updateNxJsonConfig(tree) {
    if (tree.exists('nx.json')) {
        (0, devkit_1.updateJson)(tree, 'nx.json', (json) => {
            if (json.targetDefaults?.lint?.inputs) {
                const inputSet = new Set(json.targetDefaults.lint.inputs);
                inputSet.add('{workspaceRoot}/eslint.config.js');
                json.targetDefaults.lint.inputs = Array.from(inputSet);
            }
            if (json.targetDefaults?.['@nx/linter:eslint']?.inputs) {
                const inputSet = new Set(json.targetDefaults['@nx/linter:eslint'].inputs);
                inputSet.add('{workspaceRoot}/eslint.config.js');
                json.targetDefaults['@nx/linter:eslint'].inputs = Array.from(inputSet);
            }
            if (json.namedInputs?.production) {
                const inputSet = new Set(json.namedInputs.production);
                inputSet.add('!{projectRoot}/eslint.config.js');
                json.namedInputs.production = Array.from(inputSet);
            }
            return json;
        });
    }
}
function convertConfigToFlatConfig(tree, root, source, target) {
    (0, json_converter_1.convertEslintJsonToFlatConfig)(tree, root, source, target);
}
